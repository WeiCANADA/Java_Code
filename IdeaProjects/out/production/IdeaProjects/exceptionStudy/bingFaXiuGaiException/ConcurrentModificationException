public interface List<E> extends Collection<E> {
  Iterator<E> iterator();
  boolean add(E e);
}
public class ArrayList<E> extends AbstractList<E> implements List<E>{
public boolean add(E e) {
        ensureCapacityInternal(size + 1);  // Increments modCount!!
        elementData[size++] = e;
        return true;
        }
         public Iterator<E> iterator() {
                return new Itr();
                }
          private class Itr implements Iterator<E> {

                  int expectedModCount = modCount;
                  public E next() {
                      checkForComodification();
                      int i = cursor;
                      if (i >= size)
                          throw new NoSuchElementException();
                      Object[] elementData = ArrayList.this.elementData;
                      if (i >= elementData.length)
                          throw new ConcurrentModificationException();
                      cursor = i + 1;
                      return (E) elementData[lastRet = i];
                  }


                  final void checkForComodification() {
                      if (modCount != expectedModCount)
                          throw new ConcurrentModificationException();
                  }
              }
               protected transient int modCount = 0;
}
public interface Iterator<E>